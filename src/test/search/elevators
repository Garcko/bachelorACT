#####TASK#####
## name
elevators_inst_mdp__1
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
3
## number of prob state fluents
2
## number of preconds
0
## number of actions
5
## number of hashing functions
6
## initial state
1 1 1 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
1
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
24601
## number of unique states that were encountered during task analysis
16
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
close-door(e0)
## number of values
2
## values
0 false
1 true

## index
1
## name
move-current-dir(e0)
## number of values
2
## values
0 false
1 true

## index
2
## name
open-door-going-down(e0)
## number of values
2
## values
0 false
1 true

## index
3
## name
open-door-going-up(e0)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
elevator-at-floor(e0, f0)
## number of values
2
## values
0 false
1 true
## formula
if(or(~($s(1)) ~($a(1)))) then($s(0)) elif(and($a(1) $s(2))) then($s(0)) elif(and($a(1) ~($s(2)))) then($s(0)) elif($c(1)) then($c(0))
## hash index
0
## caching type 
VECTOR
## precomputed results
16
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 0
14 1
15 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
1
## name
elevator-closed(e0)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(1) ~($a(3)) ~($a(2))) $a(0))
## hash index
1
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 1
2 2
3 0
4 3

## index
2
## name
elevator-dir-up(e0)
## number of values
2
## values
0 false
1 true
## formula
if($a(3)) then($c(1)) elif($a(2)) then($c(0)) elif($c(1)) then($s(2))
## hash index
2
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 1
2 2
3 0
4 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
person-waiting-down(f1)
## number of values
2
## values
0 false
1 true
## formula
if($s(3)) then($c(1)) elif($c(1)) then(Bernoulli($c(0.14635538)))
## determinized formula
$s(3)
## hash index
3
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
2
0 0 2 0 0.85364462 1 0.14635538
1 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
3
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
1
## name
person-waiting-up(f1)
## number of values
2
## values
0 false
1 true
## formula
if($s(4)) then($c(1)) elif($c(1)) then(Bernoulli($c(0.14635538)))
## determinized formula
$s(4)
## hash index
4
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
2
0 0 2 0 0.85364462 1 0.14635538
1 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
3
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####REWARD#####
## formula
-(-($c(0) $s(4)) $s(3))
## min
-2
## max
0
## hash index
5
## caching type
VECTOR
## precomputed results
4
0 0
1 -1
2 -1
3 -2
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
1
0 2
## kleene state fluent hash keys (first line is the number of keys)
1
0 2

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
2
0 4
1 4
## kleene state fluent hash keys (first line is the number of keys)
2
0 6
1 4

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
2
0 8
2 3
## kleene state fluent hash keys (first line is the number of keys)
2
0 18
2 3


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
2
3 1
5 1
## kleene state fluent hash keys (first line is the number of keys)
2
3 1
5 1

## index
1
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
2
4 1
5 2
## kleene state fluent hash keys (first line is the number of keys)
2
4 1
5 3



#####TRAINING SET#####
16
1 0 0 0 0 
1 1 0 0 0 
1 0 1 0 0 
1 1 1 0 0 
1 0 0 1 0 
1 1 0 1 0 
1 0 1 1 0 
1 1 1 1 0 
1 0 0 0 1 
1 1 0 0 1 
1 0 1 0 1 
1 1 1 0 1 
1 0 0 1 1 
1 1 0 1 1 
1 0 1 1 1 
1 1 1 1 1 
