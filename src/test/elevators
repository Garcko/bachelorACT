#####TASK#####
## name
elevators_inst_mdp__1
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
7
## number of prob state fluents
2
## number of preconds
0
## number of actions
5
## number of hashing functions
10
## initial state
1 0 0 1 1 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states with only one applicable reasonable action that were
## detected during task analysis, and the total number of encountered states
0 144


#####ACTION FLUENTS#####
## index
0
## name
close-door(e0)
## number of values
2
## values
0 false
1 true

## index
1
## name
move-current-dir(e0)
## number of values
2
## values
0 false
1 true

## index
2
## name
open-door-going-down(e0)
## number of values
2
## values
0 false
1 true

## index
3
## name
open-door-going-up(e0)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
elevator-at-floor(e0, f0)
## number of values
2
## values
0 false
1 true
## formula
if(or(~($s(3)) ~($a(1)))) then($s(0)) elif(and($a(1) ~($s(4)) $s(1))) then($c(1)) elif(and($a(1) $s(4) ~($s(0)))) then($s(0)) elif(and($a(1) ~($s(4)))) then($s(0)) elif($c(1)) then($c(0))
## hash index
0
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
1
## name
elevator-at-floor(e0, f1)
## number of values
2
## values
0 false
1 true
## formula
if(or(~($s(3)) ~($a(1)))) then($s(1)) elif(and($a(1) $s(4) $s(0))) then($c(1)) elif(and($a(1) ~($s(4)) $s(2))) then($c(1)) elif(and($a(1) $s(4) ~($s(1)))) then($s(1)) elif(and($a(1) ~($s(4)) ~($s(1)))) then($s(1)) elif($c(1)) then($c(0))
## hash index
1
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
2
## name
elevator-at-floor(e0, f2)
## number of values
2
## values
0 false
1 true
## formula
if(or(~($s(3)) ~($a(1)))) then($s(2)) elif(and($a(1) $s(4) $s(1))) then($c(1)) elif(and($a(1) $s(4))) then($s(2)) elif(and($a(1) ~($s(4)) ~($s(2)))) then($s(2)) elif($c(1)) then($c(0))
## hash index
2
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
3
## name
elevator-closed(e0)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(3) ~($a(3)) ~($a(2))) $a(0))
## hash index
3
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 1
2 2
3 0
4 3

## index
4
## name
elevator-dir-up(e0)
## number of values
2
## values
0 false
1 true
## formula
if($a(3)) then($c(1)) elif($a(2)) then($c(0)) elif($c(1)) then($s(4))
## hash index
4
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 1
2 2
3 0
4 0

## index
5
## name
person-in-elevator-going-down(e0)
## number of values
2
## values
0 false
1 true
## formula
if($s(5)) then(~($s(0))) elif($c(1)) then(and($s(1) ~($s(4)) ~($s(3)) $s(7)))
## hash index
5
## caching type 
VECTOR
## precomputed results
128
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 0
34 1
35 0
36 1
37 0
38 1
39 0
40 1
41 0
42 1
43 0
44 1
45 0
46 1
47 0
48 1
49 0
50 1
51 0
52 1
53 0
54 1
55 0
56 1
57 0
58 1
59 0
60 1
61 0
62 1
63 0
64 0
65 0
66 1
67 1
68 0
69 0
70 1
71 1
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 0
83 0
84 0
85 0
86 0
87 0
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 0
98 1
99 0
100 1
101 0
102 1
103 0
104 1
105 0
106 1
107 0
108 1
109 0
110 1
111 0
112 1
113 0
114 1
115 0
116 1
117 0
118 1
119 0
120 1
121 0
122 1
123 0
124 1
125 0
126 1
127 0
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
6
## name
person-in-elevator-going-up(e0)
## number of values
2
## values
0 false
1 true
## formula
if($s(6)) then(~($s(2))) elif($c(1)) then(and($s(1) $s(4) ~($s(3)) $s(8)))
## hash index
6
## caching type 
VECTOR
## precomputed results
128
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 1
34 1
35 1
36 0
37 0
38 0
39 0
40 1
41 1
42 1
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 1
51 1
52 0
53 0
54 0
55 0
56 1
57 1
58 1
59 1
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 1
83 1
84 0
85 0
86 1
87 1
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 1
98 1
99 1
100 0
101 0
102 0
103 0
104 1
105 1
106 1
107 1
108 0
109 0
110 0
111 0
112 1
113 1
114 1
115 1
116 0
117 0
118 0
119 0
120 1
121 1
122 1
123 1
124 0
125 0
126 0
127 0
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
person-waiting-down(f1)
## number of values
2
## values
0 false
1 true
## formula
if(and($s(7) ~(and($s(1) ~($s(4)) ~($s(3)))))) then($c(1)) elif($c(1)) then(Bernoulli($c(0.14635538)))
## determinized formula
and($s(7) ~(and($s(1) ~($s(4)) ~($s(3)))))
## hash index
7
## caching type 
VECTOR
## precomputed results (of determinization)
16
0 0 2 0 0.85364462 1 0.14635538
1 0 2 0 0.85364462 1 0.14635538
2 0 2 0 0.85364462 1 0.14635538
3 0 2 0 0.85364462 1 0.14635538
4 0 2 0 0.85364462 1 0.14635538
5 0 2 0 0.85364462 1 0.14635538
6 0 2 0 0.85364462 1 0.14635538
7 0 2 0 0.85364462 1 0.14635538
8 1 1 1 1
9 0 2 0 0.85364462 1 0.14635538
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
1
## name
person-waiting-up(f1)
## number of values
2
## values
0 false
1 true
## formula
if(and($s(8) ~(and($s(1) $s(4) ~($s(3)))))) then($c(1)) elif($c(1)) then(Bernoulli($c(0.14635538)))
## determinized formula
and($s(8) ~(and($s(1) $s(4) ~($s(3)))))
## hash index
8
## caching type 
VECTOR
## precomputed results (of determinization)
16
0 0 2 0 0.85364462 1 0.14635538
1 0 2 0 0.85364462 1 0.14635538
2 0 2 0 0.85364462 1 0.14635538
3 0 2 0 0.85364462 1 0.14635538
4 0 2 0 0.85364462 1 0.14635538
5 0 2 0 0.85364462 1 0.14635538
6 0 2 0 0.85364462 1 0.14635538
7 0 2 0 0.85364462 1 0.14635538
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 0 2 0 0.85364462 1 0.14635538
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####REWARD#####
## formula
+(*(and($s(6) $s(4)) $c(-0.75)) *(and($s(5) ~($s(4))) $c(-0.75)) *(and($s(6) ~($s(4))) $c(-3)) *(and($s(5) $s(4)) $c(-3)) -(-($c(0) $s(8)) $s(7)))
## min
-5.75
## max
0
## hash index
9
## caching type
VECTOR
## precomputed results
32
0 0
1 0
2 -0.75
3 -3
4 -3
5 -0.75
6 -3.75
7 -3.75
8 -1
9 -1
10 -1.75
11 -4
12 -4
13 -1.75
14 -4.75
15 -4.75
16 -1
17 -1
18 -1.75
19 -4
20 -4
21 -1.75
22 -4.75
23 -4.75
24 -2
25 -2
26 -2.75
27 -5
28 -5
29 -2.75
30 -5.75
31 -5.75
## kleene caching type
VECTOR
## kleene caching vec size
243
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
4
0 2
1 2
5 1
6 1
## kleene state fluent hash keys (first line is the number of keys)
4
0 2
1 2
5 1
6 1

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
7
0 4
1 4
2 2
5 2
6 2
7 1
8 1
## kleene state fluent hash keys (first line is the number of keys)
7
0 6
1 6
2 2
5 3
6 3
7 1
8 1

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
4
1 8
2 4
5 4
6 4
## kleene state fluent hash keys (first line is the number of keys)
4
1 18
2 6
5 9
6 9

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
8
0 8
1 16
2 8
3 4
5 8
6 8
7 2
8 2
## kleene state fluent hash keys (first line is the number of keys)
8
0 18
1 54
2 18
3 4
5 27
6 27
7 3
8 3

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
9
0 16
1 32
2 16
4 3
5 16
6 16
7 4
8 4
9 1
## kleene state fluent hash keys (first line is the number of keys)
9
0 54
1 162
2 54
4 3
5 81
6 81
7 9
8 9
9 1

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
2
5 32
9 2
## kleene state fluent hash keys (first line is the number of keys)
2
5 243
9 3

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
2
6 32
9 4
## kleene state fluent hash keys (first line is the number of keys)
2
6 243
9 9


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
3
5 64
7 8
9 8
## kleene state fluent hash keys (first line is the number of keys)
3
5 729
7 27
9 27

## index
1
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
3
6 64
8 8
9 16
## kleene state fluent hash keys (first line is the number of keys)
3
6 729
8 27
9 81



#####TRAINING SET#####
144
1 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 
1 0 0 1 0 0 0 0 0 
0 1 0 1 0 0 0 0 0 
0 0 1 1 0 0 0 0 0 
1 0 0 0 1 0 0 0 0 
0 1 0 0 1 0 0 0 0 
0 0 1 0 1 0 0 0 0 
1 0 0 1 1 0 0 0 0 
0 1 0 1 1 0 0 0 0 
0 0 1 1 1 0 0 0 0 
0 1 0 0 0 1 0 0 0 
0 0 1 0 0 1 0 0 0 
1 0 0 1 0 1 0 0 0 
0 1 0 1 0 1 0 0 0 
0 0 1 1 0 1 0 0 0 
0 1 0 0 1 1 0 0 0 
0 0 1 0 1 1 0 0 0 
0 1 0 1 1 1 0 0 0 
0 0 1 1 1 1 0 0 0 
1 0 0 0 0 0 1 0 0 
0 1 0 0 0 0 1 0 0 
1 0 0 1 0 0 1 0 0 
0 1 0 1 0 0 1 0 0 
1 0 0 0 1 0 1 0 0 
0 1 0 0 1 0 1 0 0 
1 0 0 1 1 0 1 0 0 
0 1 0 1 1 0 1 0 0 
0 0 1 1 1 0 1 0 0 
0 1 0 0 0 1 1 0 0 
1 0 0 1 0 1 1 0 0 
0 1 0 1 0 1 1 0 0 
0 1 0 0 1 1 1 0 0 
0 1 0 1 1 1 1 0 0 
0 0 1 1 1 1 1 0 0 
1 0 0 0 0 0 0 1 0 
0 1 0 0 0 0 0 1 0 
0 0 1 0 0 0 0 1 0 
1 0 0 1 0 0 0 1 0 
0 1 0 1 0 0 0 1 0 
0 0 1 1 0 0 0 1 0 
1 0 0 0 1 0 0 1 0 
0 1 0 0 1 0 0 1 0 
0 0 1 0 1 0 0 1 0 
1 0 0 1 1 0 0 1 0 
0 1 0 1 1 0 0 1 0 
0 0 1 1 1 0 0 1 0 
0 1 0 0 0 1 0 1 0 
0 0 1 0 0 1 0 1 0 
1 0 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 
0 0 1 1 0 1 0 1 0 
0 1 0 0 1 1 0 1 0 
0 0 1 0 1 1 0 1 0 
0 1 0 1 1 1 0 1 0 
0 0 1 1 1 1 0 1 0 
1 0 0 0 0 0 1 1 0 
0 1 0 0 0 0 1 1 0 
1 0 0 1 0 0 1 1 0 
0 1 0 1 0 0 1 1 0 
1 0 0 0 1 0 1 1 0 
0 1 0 0 1 0 1 1 0 
1 0 0 1 1 0 1 1 0 
0 1 0 1 1 0 1 1 0 
0 0 1 1 1 0 1 1 0 
0 1 0 0 0 1 1 1 0 
1 0 0 1 0 1 1 1 0 
0 1 0 1 0 1 1 1 0 
0 1 0 0 1 1 1 1 0 
0 1 0 1 1 1 1 1 0 
0 0 1 1 1 1 1 1 0 
1 0 0 0 0 0 0 0 1 
0 1 0 0 0 0 0 0 1 
0 0 1 0 0 0 0 0 1 
1 0 0 1 0 0 0 0 1 
0 1 0 1 0 0 0 0 1 
0 0 1 1 0 0 0 0 1 
1 0 0 0 1 0 0 0 1 
0 1 0 0 1 0 0 0 1 
0 0 1 0 1 0 0 0 1 
1 0 0 1 1 0 0 0 1 
0 1 0 1 1 0 0 0 1 
0 0 1 1 1 0 0 0 1 
0 1 0 0 0 1 0 0 1 
0 0 1 0 0 1 0 0 1 
1 0 0 1 0 1 0 0 1 
0 1 0 1 0 1 0 0 1 
0 0 1 1 0 1 0 0 1 
0 1 0 0 1 1 0 0 1 
0 0 1 0 1 1 0 0 1 
0 1 0 1 1 1 0 0 1 
0 0 1 1 1 1 0 0 1 
1 0 0 0 0 0 1 0 1 
0 1 0 0 0 0 1 0 1 
1 0 0 1 0 0 1 0 1 
0 1 0 1 0 0 1 0 1 
1 0 0 0 1 0 1 0 1 
0 1 0 0 1 0 1 0 1 
1 0 0 1 1 0 1 0 1 
0 1 0 1 1 0 1 0 1 
0 0 1 1 1 0 1 0 1 
0 1 0 0 0 1 1 0 1 
1 0 0 1 0 1 1 0 1 
0 1 0 1 0 1 1 0 1 
0 1 0 0 1 1 1 0 1 
0 1 0 1 1 1 1 0 1 
0 0 1 1 1 1 1 0 1 
1 0 0 0 0 0 0 1 1 
0 1 0 0 0 0 0 1 1 
0 0 1 0 0 0 0 1 1 
1 0 0 1 0 0 0 1 1 
0 1 0 1 0 0 0 1 1 
0 0 1 1 0 0 0 1 1 
1 0 0 0 1 0 0 1 1 
0 1 0 0 1 0 0 1 1 
0 0 1 0 1 0 0 1 1 
1 0 0 1 1 0 0 1 1 
0 1 0 1 1 0 0 1 1 
0 0 1 1 1 0 0 1 1 
0 1 0 0 0 1 0 1 1 
0 0 1 0 0 1 0 1 1 
1 0 0 1 0 1 0 1 1 
0 1 0 1 0 1 0 1 1 
0 0 1 1 0 1 0 1 1 
0 1 0 0 1 1 0 1 1 
0 0 1 0 1 1 0 1 1 
0 1 0 1 1 1 0 1 1 
0 0 1 1 1 1 0 1 1 
1 0 0 0 0 0 1 1 1 
0 1 0 0 0 0 1 1 1 
1 0 0 1 0 0 1 1 1 
0 1 0 1 0 0 1 1 1 
1 0 0 0 1 0 1 1 1 
0 1 0 0 1 0 1 1 1 
1 0 0 1 1 0 1 1 1 
0 1 0 1 1 0 1 1 1 
0 0 1 1 1 0 1 1 1 
0 1 0 0 0 1 1 1 1 
1 0 0 1 0 1 1 1 1 
0 1 0 1 0 1 1 1 1 
0 1 0 0 1 1 1 1 1 
0 1 0 1 1 1 1 1 1 
0 0 1 1 1 1 1 1 1 
